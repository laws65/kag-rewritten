[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;


uniform vec4 original_0: hint_color;
uniform vec4 original_1: hint_color;
uniform vec4 original_2: hint_color;
uniform vec4 original_3: hint_color;

uniform vec4 replace_0: hint_color;
uniform vec4 replace_1: hint_color;
uniform vec4 replace_2: hint_color;
uniform vec4 replace_3: hint_color;

uniform bool should_swap;

const float precision = 0.1;


vec4 swap_color(vec4 color){
	if (!should_swap) return color;
	vec4 original_colors[4] = vec4[4] (original_0, original_1, original_2, original_3);
	vec4 replace_colors[4] = vec4[4] (replace_0, replace_1, replace_2, replace_3);
	for (int i = 0; i < 4; i ++) {
		if (distance(color, original_colors[i]) <= precision){
			return replace_colors[i];
		}
	}
	return color;
}


void fragment() {
	COLOR = swap_color(texture(TEXTURE, UV));
}"

[resource]
resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/original_0 = Color( 0.172549, 0.686275, 0.870588, 1 )
shader_param/original_1 = Color( 0.113725, 0.521569, 0.670588, 1 )
shader_param/original_2 = Color( 0.101961, 0.305882, 0.513726, 1 )
shader_param/original_3 = Color( 0.133333, 0.152941, 0.376471, 1 )
shader_param/replace_0 = Color( 0.835294, 0.329412, 0.247059, 1 )
shader_param/replace_1 = Color( 0.717647, 0.2, 0.2, 1 )
shader_param/replace_2 = Color( 0.580392, 0.105882, 0.105882, 1 )
shader_param/replace_3 = Color( 0.231373, 0.0784314, 0.0235294, 1 )
shader_param/should_swap = false
